# Profiling begin
# zmodload zsh/zprof


# Launch tmux at start
# This should be in the beginning of zshrc
# if [[ -z "$TMUX" ]] && [[ "$HOST" != 'soyccanmac'* ]]; then
#     tmux a -d
# fi


## Global varibales

# The inner expansion follows ${name:-word} form, so as the variable called
# `name` (which is empty string) does not exist, the value will be given from
# `word` (which is "%x"). Refer to:
# http://zsh.sourceforge.net/Doc/Release/Expansion.html#Parameter-Expansion
#
# The %x is a prompt escape indicating the file being sourced. Refer to:
# http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html#Shell-state
#
# And the (%) is a parameter expansion flag that expands the %x. Refer to:
# http://zsh.sourceforge.net/Doc/Release/Expansion.html#Parameter-Expansion-Flags
#
# The outer expansion has P modifier that calls realpath() to obtain the
# absolute path, and h modifier to obtain dirname. Refer to:
# http://zsh.sourceforge.net/Doc/Release/Expansion.html#Modifiers
#
source_dir="${${(%):-%x}:P:h}"


## Global functions

# Check if command exists, return 0 on success
# MUCH faster than external program `which` since this don't
# require forking process
# Bash equivalence: command -v / type
# Zsh equivalence: whence
has() {
    [ $commands[$1] ]
}

# Determine OS
is_macos() {
    # ${name:#pattern} tries to match $name with pattern
    # refer to:
    # http://zsh.sourceforge.net/Doc/Release/Expansion.html#Parameter-Expansion
    #
    # (M) includes the matched portion in the result.
    # refer to:
    # http://zsh.sourceforge.net/Doc/Release/Expansion.html#Parameter-Expansion-Flags
    #
    # The [[ ]] test a non-empty string
    [[ ${(M)OSTYPE:#*darwin*} ]]
}
is_linux() {
    # ${name##pattern} removes the longest prefix that matches pattern
    # from $name
    [[ ! ${OSTYPE##linux*} ]]
}


## Set environments

# PATH
# ignore error when globbing fails (/path/to/some/dir/* not exist)
setopt null_glob

_path=('/snap/bin'
       "$HOME/go/bin"
       "$HOME/.rvm/bin"
       "$HOME/.pyenv/bin"
       "$HOME/.local/bin")

# Ruby gems
for x in "$HOME"/.gem/ruby/*; do
    _path+=("$x/bin")
done

# Python pips
# Linux: $HOME/.local/bin
# masOS
_path+=(/Library/Frameworks/Python.framework/Versions/Current/bin)
for x in "$HOME"/Library/Python/*/bin; do
    _path+=("$x")
done

# Prior elements in $path have priority
for p in $_path; do
    [ -d "$p" ] && PATH="$PATH:$p"
done

unset _path
export PATH

# Man pages path
# TODO

# You may need to manually set your language environment
export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
if has nvim; then
    export EDITOR='nvim'
elif has vim; then
    export EDITOR='vim'
elif has vi; then
    export EDITOR='vi'
fi

# Homebrew
export HOMEBREW_NO_AUTO_UPDATE=1


## Begin of routine

# Pull new changes of dotfiles, in background
(git -C "$HOME/dotfiles" pull &>/dev/null &)

### Added by Zi installer
if [[ ! -f $HOME/.zi/bin/zi.zsh ]]; then
  print -P "%F{33}▓▒░ %F{160}Installing (%F{33}z-shell/zi%F{160})…%f"
  command mkdir -p "$HOME/.zi" && command chmod g-rwX "$HOME/.zi"
  command git clone -q --depth=1 --branch "main" https://github.com/z-shell/zi "$HOME/.zi/bin" && \
    print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
    print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi
source "$HOME/.zi/bin/zi.zsh"
autoload -Uz _zi
(( ${+_comps} )) && _comps[zi]=_zi
# examples here -> https://z-shell.pages.dev/docs/gallery/collection
# zicompinit # <- https://z-shell.pages.dev/docs/gallery/collection#minimal
### End of Zi installer chunk

# Set background color
# This is bg of Solorized Dark from iTerm2
# printf '\e]11;#002b36\a'

# Load colors
# Plugin `colored-man-pages` requires this
autoload -Uz colors
colors

# Load additional config
# since some plugin overrites key bindings
# key bindings should be first
source "$source_dir/key-bindings.zsh"

# Zinit plugins
source "$source_dir/plugins.zsh"

# My command aliases
source "$source_dir/aliases.zsh"

# My plugins
for x in $source_dir/*.plugin.zsh; do
    source $x
done


# Completion Path
# TODO: is this right
fpath+=($HOME/dotfiles/zsh)


# Profiling end
# zprof
