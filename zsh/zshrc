# Profiling begin
# zmodload zsh/zprof

## If connected from remote & not in tmux, start tmux.
if [[ $SSH_CONNECTION && -z ${TMUX+X}${ZSH_SCRIPT+X}${ZSH_EXECUTION_STRING+X} ]]; then
    tmux a -d
fi


## Global variables & functions for zshrc
ZSH=$HOME/dotfiles/zsh
ZSH_PLUGGED=$ZSH/plugged

gbl_funcs=()

function zcompile-many {
    local f
    for f; do zcompile -R -- "$f".zwc "$f"; done
}
gbl_funcs+=zcompile-many

# Clone plugins included as submodules of my dotfiles repo
# return 1 if already cloned, 0 otherwise
function clone-plugin {
    local name=$1
    if [[ "$(<$ZSH/../.git/config)" != *$name* ]]; then
        # if .git/config contains no $name string
        # we say the submodule is not cloned, and clone it
        git -C $ZSH_PLUGGED submodule update --init --depth=1 $name
        return 0
    fi
    return 1
}
gbl_funcs+=clone-plugin

# Check if command exists, return 0 on success
# much faster than external program `which` as no forking is needed
# instead, it searches in the external commands hash table
# unlike `command -v`, `type` or `whence -v`, it excludes aliases
# https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-commands
function has { [[ $commands[$1] ]] }
gbl_funcs+=has

# Determine OS
function is_macos { [[ $OSTYPE = darwin* ]] }
function is_linux { [[ $OSTYPE = linux* ]] }
gbl_funcs+=(is_macos is_linux)


## Clone and compile to wordcode missing plugins
clone-plugin fast-syntax-highlighting &&
    zcompile-many $ZSH_PLUGGED/fast-syntax-highlighting/**/*.zsh

clone-plugin zsh-autosuggestions &&
    zcompile-many $ZSH_PLUGGED/zsh-autosuggestions/**/*.zsh

clone-plugin powerlevel10k &&
    make -C $ZSH_PLUGGED/powerlevel10k pkg

clone-plugin zsh-completions &&
    zcompile-many $ZSH_PLUGGED/zsh-completions/**/*.zsh

clone-plugin ohmyzsh &&
    zcompile-many $ZSH_PLUGGED/ohmyzsh/lib/*.zsh

# TODO: include fzf, fasd, exa, bat... binaries in PATH
# may refer to zinit annex bin-gem-node
clone-plugin fzf &&
    $ZSH_PLUGGED/fzf/install --bin

clone-plugin fasd


## Activate Powerlevel10k Instant Prompt
[[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]] &&
    source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"


## Environments

# PATH
function {
    # null_glob: ignore error when globbing fails (/path/to/some/dir/* not exist)
    [[ -o null_glob ]] && local null_glob_set=1 || local null_glob_set=
    setopt null_glob

    local cur_path=(${(s.:.)PATH})
    local new_path=()
    local p

    # Snap
    new_path+=/snap/bin

    # Go
    new_path+=$HOME/go/bin

    # Haskell
    new_path+=($HOME/.ghcup/bin $HOME/.cabal/bin)

    # Ruby rvm & gems
    new_path+=$HOME/.rvm/bin
    for p in $HOME/.gem/ruby/*; do
        new_path+=$p/bin
    done

    # Python pyenv & pips
    # Linux
    new_path+=$HOME/.pyenv/bin
    new_path+=$HOME/.local/bin
    # masOS
    new_path+=(/Library/Frameworks/Python.framework/Versions/Current/bin)
    for p in $HOME/Library/Python/*/bin; do
        new_path+=$p
    done

    # update PATH env var
    for p in $new_path; do
        # if $p exists as a dir & not in current $PATH, prepend it to $PATH
        [[ -d $p && ! ${cur_path[(r)$p]} ]] && PATH=$p:$PATH
    done

    export PATH
    [[ ! $null_glob_set ]] && unsetopt null_glob
}

# Man pages path
# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
if has nvim; then
    export EDITOR='nvim'
elif has vim; then
    export EDITOR='vim'
elif has vi; then
    export EDITOR='vi'
fi

# Homebrew
export HOMEBREW_NO_AUTO_UPDATE=1


## Pre-Plugin settings
# configs that need to be loaded before plugins are loaded

# key bindings need to be loaded before zsh-syntax-highlighting
source $ZSH/key-bindings.zsh


## Load plugins
# remember to clone them first

# Fast Syntax Highlighting: Feature rich syntax highlighting for Zsh
source $ZSH_PLUGGED/fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh

# zsh-autosuggestions: Fish-like fast/unobtrusive autosuggestions for zsh
ZSH_AUTOSUGGEST_MANUAL_REBIND=1
source $ZSH_PLUGGED/zsh-autosuggestions/zsh-autosuggestions.zsh

# Powerlevel10k: A theme for Zsh
source $ZSH_PLUGGED/powerlevel10k/powerlevel10k.zsh-theme
source $ZSH/p10k.zsh

# zsh-completions: Additional completion definitions for Zsh
fpath+=$ZSH_PLUGGED/zsh-completions/src

# Oh My Zsh
source $ZSH_PLUGGED/ohmyzsh/lib/completion.zsh
source $ZSH_PLUGGED/ohmyzsh/lib/history.zsh
function {
    # Load colors
    # Plugin `colored-man-pages` requires this
    autoload -Uz colors
    colors

    local name
    for name in colored-man-pages \
                command-not-found \
                encode64 \
                systemadmin \
                systemd \
                git; do
        source $ZSH_PLUGGED/ohmyzsh/plugins/$name/$name.plugin.zsh
    done
}

# globalias: expand glob & alias in command line
source $ZSH/globalias.plugin.zsh

# fasd & fzf
[[ $- == *i* ]] && \
    source "/home/soyccan/dotfiles/zsh/plugged/fzf/shell/completion.zsh" 2> /dev/null
source $ZSH_PLUGGED/fzf/shell/key-bindings.zsh
source $ZSH/fzf.plugin.zsh


## Epilogue

# Load my configs (overrides loaded plugins)
source $ZSH/commands.zsh
source $ZSH/aliases.zsh

# my completions
fpath+=$ZSH

# Enable the "new" completion system (compsys)
autoload -Uz compinit && compinit
[[ ~/.zcompdump.zwc -nt ~/.zcompdump ]] || zcompile-many ~/.zcompdump

unfunction $gbl_funcs
unset gbl_funcs

# Pull new changes of dotfiles in background
(git -C "$HOME/dotfiles" pull &>/dev/null &)


# Profiling end
# zprof
