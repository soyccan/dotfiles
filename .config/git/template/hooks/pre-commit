#!/bin/bash

# Adapted from:
# https://gist.github.com/guysmoilov/ddb3329e31b001c1e990e08394a08dc4

# This is a pre-commit hook that ensures attempts to commit files that are
# are larger than $limit to your _local_ repo fail, with a helpful error message.

# You can override the default limit of 5MB by supplying the environment variable:
# GIT_FILE_SIZE_LIMIT=42000000 git commit -m "This commit is allowed file sizes up to 42MB"

# Maximum file size limit in MB
limit_mb=${GIT_FILE_SIZE_LIMIT:-100} # Default 100MB

# Move to the repo root so git files paths make sense
repo_root="$( git rev-parse --show-toplevel )"
cd "$repo_root" || exit 1

if git rev-parse --verify HEAD &>/dev/null; then
    against=HEAD
else
    # Empty tree
    against="$( git hash-object -t tree /dev/null )"
fi

# Set split so that for loop below can handle spaces in file names by splitting on line breaks
IFS='
'

echo "Checking staged file sizes"

for file in $( git diff-index --cached --name-only "$against" ); do
    file_size_mb=0
    if [[ -f "$file" ]]; then
        file_size_mb="$( du -m "$file" | awk '{print $1}' )"
    fi

    if (( file_size_mb > limit_mb )); then
        echo "File $file is $file_size_mb MB, which is larger than \
our configured limit of $limit_mb MB. Compression starts."

        zip -s 99M "$file.zip" "$file"

        git restore --staged "$file"
        git add "$file.zip"

        echo "$file" >> "$repo_root/.large_files"
        echo "$file" >> "$repo_root/.gitignore"
    fi
done
